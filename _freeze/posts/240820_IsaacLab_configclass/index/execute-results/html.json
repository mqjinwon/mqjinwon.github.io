{
  "hash": "c92fb80d5de6def0ed5598823fc3bab1",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"IsaacLabÏùò configclass decorator Ïó≠Ìï†\"\nauthor: \"ÍπÄÏßÑÏõê\"\ndate: \"2024-08-20\"\ncategories: [nvidia, isaaclab, robotics, rl, python]\nimage: https://isaac-sim.github.io/IsaacLab/_images/isaaclab.jpg\n\nformat: \n  html:\n    code-fold: show   # Optional: Allows code blocks to be folded\n    code-overflow: wrap  # Prevents horizontal scrolling\njupyter: python3\n\ntoc: true  # Optional: Adds a table of contents\n---\n\n\n\n\nconfigclass vs. dataclass ÎπÑÍµêÌïòÍ∏∞\n\n---\n\n\n# ‚úÇÔ∏èTL;DR\n\nconfigclassÎ•º ÏÇ¨Ïö©ÌïòÎ©¥...\n\n- **dataclass**Ïùò Î∂ÄÏ°±Ìïú Î∂ÄÎ∂ÑÏùÑ Ï±ÑÏõåÏ§Ä decorator\n- **Type annotation**Í≥º **Mutable default** ÏùÑ ÏûêÎèôÏúºÎ°ú Ï≤òÎ¶¨ÌïòÎØÄÎ°ú ÏÇ¨Ïö©ÌïòÍ∏∞ Í∞ÑÎã®Ìï®\n- **Class instance**ÏôÄ **dictionary** Í∞ÑÏùò Ïâ¨Ïö¥ Î≥ÄÌôòÏùÑ ÏúÑÌïú Ïú†Ìã∏Î¶¨Ìã∞ Î©îÏÜåÎìú Ï†úÍ≥µ\n\n\n\n## üèÅIntroduction\n\nÎ≥∏ Ìè¨Ïä§ÌåÖÏóêÏÑúÎäî pythonÏóêÏÑú Í∏∞Î≥∏Ï†ÅÏúºÎ°ú Ï†úÍ≥µÌïòÎäî `@dataclass`ÏôÄ IsaacLabÏóêÏÑú ÏÇ¨Ïö©ÌïòÎäî `@configclass` Í∞ÑÏùò Ï∞®Ïù¥Ï†êÏùÑ ÏÜåÍ∞úÌïúÎã§.\n\n\n\n![image-20240820212004490](assets/image-20240820212004490.png)\n\nÎ≥∏ Ìè¨Ïä§ÌåÖÏùÑ ÏßÑÌñâÌïòÎäî Ïù¥Ïú†Îäî IsaacLab extension ÌîÑÎ°úÏ†ùÌä∏Ïù∏ [IsaacLabExtensionTemplate](https://github.com/isaac-sim/IsaacLabExtensionTemplate) ÏóêÏÑú ÏÇ¨Ïö©ÌïòÎäî ÏΩîÎìú Ï§ë  ÏúÑ Ïù¥ÎØ∏ÏßÄÏôÄ Í∞ôÏù¥ configclass decoratorÎ•º Î∞úÍ≤¨ÌñàÎäîÎç∞, Ïñ¥Îñ†Ìïú Ïö©ÎèÑÎ°ú ÏÇ¨Ïö©ÎêòÎäî ÏßÄ Í∂ÅÍ∏àÌï¥ÏÑúÏòÄÎã§.  Í∑∏ÎûòÏÑú ÏÑ§Î™ÖÏùÑ Ï∞æÏïÑÎ≥¥Îãà dataclass decoratorÎ•º Ï¢Ä Îçî ÌôïÏû•ÏÑ± ÏûàÍ≤å ÎßåÎì† Í≤ÉÏù¥ÎùºÍ≥† ÏÑ§Î™ÖÏùÑ ÌïòÍ∏∞Ïóê ÎëêÍ∞ÄÏßÄÏùò decoratorÎ•º ÎπÑÍµêÌï¥Î≥¥Í≥†Ïûê ÌïúÎã§.\n\n\n\n## üå∏DecoratorÎûÄ?\n\nÏö∞ÏÑ† DecoratorÍ∞Ä Î≠îÏßÄ Î™®Î•º ÏàòÎèÑ ÏûàÏúºÎãà Í∞ÑÎã®Ìûà ÏÑ§Î™ÖÌïòÍ≥† ÎÑòÏñ¥Í∞ÄÎèÑÎ°ù ÌïòÍ≤†Îã§.\n\n\n\n> [!NOTE]\n>\n> Ïñ¥Îñ§ Ìï®ÏàòÎ•º Î∞õÏïÑ ÌäπÏ†ï Ïó≠Ìï†ÏùÑ ÏàòÌñâÌïòÍ≥† Ïù¥Î•º Îã§Ïãú Ìï®ÏàòÏùò ÌòïÌÉúÎ°ú Î∞òÌôòÌïòÎäî Ìï®Ïàò\n\n\n\nPython Decorator Îã§Î•∏ Ìï®ÏàòÎ•º ÏûÖÎ†•ÏúºÎ°ú ÏÇ¨Ïö©ÌïòÍ≥† Î™ÖÏãúÏ†ÅÏúºÎ°ú ÏàòÏ†ïÌïòÏßÄ ÏïäÍ≥† Ìï¥Îãπ ÎèôÏûëÏùÑ ÌôïÏû•ÌïòÍ±∞ÎÇò Î≥ÄÍ≤ΩÌïòÎäî Ìï®ÏàòÎã§. DecoratorÎäî ÏùºÎ∞òÏ†ÅÏúºÎ°ú ÍπîÎÅîÌïòÍ≥† ÏùΩÍ∏∞ Ïâ¨Ïö¥ Î∞©ÏãùÏúºÎ°ú Ìï®ÏàòÎÇò Î©îÏÑúÎìúÏóê Í∏∞Îä•ÏùÑ Ï∂îÍ∞ÄÌïòÎäî Îç∞ ÏÇ¨Ïö©ÌïúÎã§.\n\n\n\n**Decorator template**\n\n::: {#278265ad .cell execution_count=1}\n``` {.python .cell-code}\ndef my_decorator(func):\n    def wrapper(*args, **kwargs):\n        # Code to execute before the function call\n        result = func(*args, **kwargs)\n        # Code to execute after the function call\n        return result\n    return wrapper\n\n@my_decorator\ndef my_function():\n    print(\"Hello, World!\")\n```\n:::\n\n\nÏúÑÏôÄ Í∞ôÏù¥ my_decorator Î•º ÎßåÎì§Î©¥, Ïù¥ÌõÑÏùò Îã§Î•∏ Ìï®ÏàòÏóêÏÑú @my_decoratorÎ•º Î∂ôÏó¨ÏÑú ÏÇ¨Ïö©Ìï† Ïàò ÏûàÎã§.\n\n\n\n**Example - logging**\n\n::: {#66b4031c .cell execution_count=2}\n``` {.python .cell-code}\ndef log_decorator(func):\n    def wrapper(*args, **kwargs):\n        print(f\"Calling function {func.__name__}\")\n        result = func(*args, **kwargs)\n        print(f\"{func.__name__} returned {result}\")\n        return result\n    return wrapper\n\n@log_decorator\ndef add(a, b):\n    return a + b\n\nadd(3, 4)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCalling function add\nadd returned 7\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=2}\n```\n7\n```\n:::\n:::\n\n\nÏúÑ Ïã§ÌóòÍ≤∞Í≥ºÎ°ú Ïïå Ïàò Ïûà ÎìØ, add Ìï®ÏàòÎ•º Ìò∏Ï∂úÌïòÎ©¥ functionÏù¥ decorator Ìï®ÏàòÎ°ú Îì§Ïñ¥Í∞ÄÏÑú ÎÇ¥Î∂Ä Í∏∞Îä•ÏùÑ ÏàòÌñâÌïú ÌõÑÏóê Í≤∞Í≥ºÍ∞íÏùÑ Î±âÏñ¥ÎÇ∏Îã§.\n\n\n\n**Example - Timing Decorator**\n\n::: {#309fce68 .cell execution_count=3}\n``` {.python .cell-code}\nimport time\n\ndef timing_decorator(func):\n    def wrapper(*args, **kwargs):\n        start_time = time.time()\n        result = func(*args, **kwargs)\n        end_time = time.time()\n        print(f\"{func.__name__} took {end_time - start_time} seconds\")\n        return result\n    return wrapper\n\n@timing_decorator\ndef compute_square(n):\n    return n * n\n\ncompute_square(10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ncompute_square took 7.152557373046875e-07 seconds\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\n100\n```\n:::\n:::\n\n\nÏúÑÏôÄ Í∞ôÏù¥ ÏãúÍ∞Ñ Ï∏°Ï†ï ÏãúÏóêÎèÑ ÏÇ¨Ïö©Ìï† Ïàò ÏûàÎã§.\n\n\n\n**Keypoints**\n\n- **Decorators**: Ïã§Ï†ú ÏΩîÎìúÎ•º Î≥ÄÍ≤ΩÌïòÏßÄ ÏïäÍ≥† Í∏∞Îä•ÏùÑ ÏàòÏ†ïÌïòÍ±∞ÎÇò Ìñ•ÏÉÅÏãúÌÇ®Îã§.\n\n- **`@` syntax**: `@decorator_name` Î¨∏Î≤ïÏùÄ DecoratorÎ•º ÏÇ¨Ïö©ÌïòÍ∏∞ ÏúÑÌïú Î∞©Î≤ïÏù¥Îã§.\n\n\n\n## üíΩDataclass Í∏∞Îä•\n\nPythonÏùò dataclassÎäî dataclasses Î™®Îìà(Python 3.7ÏóêÏÑú ÎèÑÏûÖÎê®)Ïù¥ Ï†úÍ≥µÌïòÎäî Îç∞ÏΩîÎ†àÏù¥ÌÑ∞Ïù¥Ïûê Ïú†Ìã∏Î¶¨Ìã∞Î°ú, `__init__`, `__repr__`, `__eq__` Îì±Í≥º Í∞ôÏùÄ ÌäπÏàò Î©îÏÑúÎìúÎ•º ÏûêÎèôÏúºÎ°ú ÏÉùÏÑ±ÌïúÎã§. Ï£ºÎ°ú Îç∞Ïù¥ÌÑ∞Î•º Ï†ÄÏû•ÌïòÍ≥† ÏÉÅÏö©Íµ¨ ÏΩîÎìúÎ•º Ï§ÑÏù¥Îäî Îç∞ ÏÇ¨Ïö©ÎêòÎäî ÌÅ¥ÎûòÏä§ ÏÉùÏÑ±ÏùÑ Îã®ÏàúÌôîÌïòÎèÑÎ°ù ÏÑ§Í≥ÑÎêòÏóàÎã§.\n\n\n\n`@dataclass`Î°ú ÌÅ¥ÎûòÏä§Î•º Ïû•ÏãùÌïòÎ©¥ PythonÏùÄ ÏûêÎèôÏúºÎ°ú Îã§Ïùå Î©îÏÑúÎìúÎ•º ÏÉùÏÑ±ÌïúÎã§.\n\n- `__init__`: Îß§Í∞úÎ≥ÄÏàòÎ•º Í∏∞Î∞òÏúºÎ°ú ÏÜçÏÑ±ÏùÑ ÏÑ§Ï†ïÌïòÎäî Ï¥àÍ∏∞Ìôî Î∞©Î≤ï.\n- `__repr__`: ÏùΩÏùÑ Ïàò ÏûàÎäî Î¨∏ÏûêÏó¥ Ï∂úÎ†•ÏùÑ Ï†úÍ≥µÌïòÎäî Î¨∏ÏûêÏó¥ ÌëúÌòÑ Î∞©Î≤ï.\n- `__eq__`: ÏÜçÏÑ±ÏùÑ Í∏∞Ï§ÄÏúºÎ°ú Ïù∏Ïä§ÌÑ¥Ïä§Î•º ÎπÑÍµêÌïòÎäî ÎèôÎì± Î∞©Î≤ï.\n- `__hash__`: Í∞ùÏ≤¥Î•º hashable ÌïòÍ≤å ÎßåÎìúÎäî Ìï¥Ïãú Î∞©Î≤ï(ÏÑ†ÌÉù ÏÇ¨Ìï≠, frozen ÏÑ§Ï†ïÏóê Îî∞Îùº Îã§Î¶Ñ).\n- `__post_init__`: Ï∂îÍ∞Ä Ï¥àÍ∏∞ÌôîÎ•º ÏúÑÌï¥ Ï†ïÏùòÌï† Ïàò ÏûàÎäî ÏÑ†ÌÉùÏ†Å Î©îÏÜåÎìú.\n\n::: {#9f890194 .cell execution_count=4}\n``` {.python .cell-code}\nfrom dataclasses import dataclass\n\n@dataclass\nclass Person:\n    name: str\n    age: int\n    job: str = \"Unknown\"  # Default value for job\n\n# Creating an instance\np = Person(name=\"Alice\", age=30)\n\n# Accessing attributes\nprint(p.name)  # Output: Alice\nprint(p.age)   # Output: 30\nprint(p.job)   # Output: Unknown\n\n# Automatic __repr__ method\nprint(p)  # Output: Person(name='Alice', age=30, job='Unknown')\n\n# Automatic __eq__ method\np2 = Person(name=\"Alice\", age=30)\nprint(p == p2)  # Output: True\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAlice\n30\nUnknown\nPerson(name='Alice', age=30, job='Unknown')\nTrue\n```\n:::\n:::\n\n\nÏúÑ ÏòàÏãúÏôÄ Í∞ôÏù¥ dataclassÎ•º ÏÇ¨Ïö©ÌïòÎ©¥ ÏïÑÎûòÏôÄ Í∞ôÏùÄ Ïù¥Ï†êÎì§ÏùÑ ÏñªÏùÑ Ïàò ÏûàÎã§.\n\n1. Boilerplate ÏµúÏÜåÌôî\n\n   @dataclass Îç∞ÏΩîÎ†àÏù¥ÌÑ∞Îäî `__init__`, `__repr__` Î∞è `__eq__`ÏôÄ Í∞ôÏùÄ Î©îÏÑúÎìúÎ•º ÏûêÎèôÏúºÎ°ú ÏÉùÏÑ±ÌïòÏó¨ Î∞òÎ≥µÏ†ÅÏù∏ ÏΩîÎìúÎ•º ÏûëÏÑ±ÌïòÏßÄ ÏïäÏïÑÎèÑ Îê®.\n\n2. Type Annotation\n\n    dataclassÎäî PythonÏùò type hintÎ•º ÏÇ¨Ïö©ÌïúÎã§. Îã® Í∞Å ÌïÑÎìúÏóêÎäî ype annotationÏù¥ ÏûàÏñ¥Ïïº ÌïúÎã§.\n\n3. Default Value\n\n    ÏùºÎ∞ò ÌÅ¥ÎûòÏä§ ÏÜçÏÑ±Í≥º ÎßàÏ∞¨Í∞ÄÏßÄÎ°ú ÌïÑÎìúÏóê Í∏∞Î≥∏Í∞íÏùÑ Ï†úÍ≥µÌï† Ïàò ÏûàÎã§.\n\n4. Immutability\n\n   Îç∞ÏΩîÎ†àÏù¥ÌÑ∞ÏóêÏÑú `frozen=True`Î•º ÏÑ§Ï†ïÌïòÎ©¥ Îç∞Ïù¥ÌÑ∞ ÌÅ¥ÎûòÏä§Î•º Î∂àÎ≥ÄÏúºÎ°ú ÎßåÎì§ Ïàò ÏûàÎã§. Ï¶â, ÏÉùÏÑ± ÌõÑÏóê Ìï¥Îãπ ÏÜçÏÑ±ÏùÑ ÏàòÏ†ïÌï† Ïàò ÏóÜÎã§.\n\n5. Automatic Ordering\n\n   Îç∞ÏΩîÎ†àÏù¥ÌÑ∞ÏóêÏÑú `order=True`Î•º ÏÑ§Ï†ïÌïòÎ©¥ ÌïÑÎìú ÏàúÏÑúÏóê Îî∞Îùº ÎπÑÍµê Î∞©Î≤ï(`__lt__`, `__le__`, `__gt__`, `__ge__`)ÏùÑ ÏûêÎèôÏúºÎ°ú ÏÉùÏÑ±Ìï† Ïàò ÏûàÏäµÎãàÎã§.\n\n::: {#d93a7c41 .cell execution_count=5}\n``` {.python .cell-code}\nfrom dataclasses import dataclass, field\n\n@dataclass(order=True, frozen=True)\nclass Product:\n    name: str = field(compare=False)\n    price: float\n    quantity: int = field(default=0, compare=False)  # Exclude from ordering\n\n# Creating an instance\np1 = Product(name=\"Laptop\", price=999.99)\np2 = Product(name=\"Tablet\", price=499.99)\n\n# Comparing products (by price since quantity is excluded)\nprint(p1 > p2)  # Output: True\n\n# p1.name = \"wrong\"\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTrue\n```\n:::\n:::\n\n\n## üíæconfigclass Î∂ÑÏÑù\n\n::: {#1e696c28 .cell execution_count=6}\n``` {.python .cell-code}\ndef __dataclass_transform__():\n    \"\"\"Add annotations decorator for PyLance.\"\"\"\n    return lambda a: a\n\n\n@__dataclass_transform__()\ndef configclass(cls, **kwargs):\n    \"\"\"Wrapper around `dataclass` functionality to add extra checks and utilities.\n\n    As of Python 3.7, the standard dataclasses have two main issues which makes them non-generic for\n    configuration use-cases. These include:\n\n    1. Requiring a type annotation for all its members.\n    2. Requiring explicit usage of :meth:`field(default_factory=...)` to reinitialize mutable variables.\n\n    This function provides a decorator that wraps around Python's `dataclass`_ utility to deal with\n    the above two issues. It also provides additional helper functions for dictionary <-> class\n    conversion and easily copying class instances.\n\n    Usage:\n\n    .. code-block:: python\n\n        from dataclasses import MISSING\n\n        from omni.isaac.lab.utils.configclass import configclass\n\n\n        @configclass\n        class ViewerCfg:\n            eye: list = [7.5, 7.5, 7.5]  # field missing on purpose\n            lookat: list = field(default_factory=[0.0, 0.0, 0.0])\n\n\n        @configclass\n        class EnvCfg:\n            num_envs: int = MISSING\n            episode_length: int = 2000\n            viewer: ViewerCfg = ViewerCfg()\n\n        # create configuration instance\n        env_cfg = EnvCfg(num_envs=24)\n\n        # print information as a dictionary\n        print(env_cfg.to_dict())\n\n        # create a copy of the configuration\n        env_cfg_copy = env_cfg.copy()\n\n        # replace arbitrary fields using keyword arguments\n        env_cfg_copy = env_cfg_copy.replace(num_envs=32)\n\n    Args:\n        cls: The class to wrap around.\n        **kwargs: Additional arguments to pass to :func:`dataclass`.\n\n    Returns:\n        The wrapped class.\n\n    .. _dataclass: https://docs.python.org/3/library/dataclasses.html\n    \"\"\"\n    # add type annotations\n    _add_annotation_types(cls)\n    # add field factory\n    _process_mutable_types(cls)\n    # copy mutable members\n    # note: we check if user defined __post_init__ function exists and augment it with our own\n    if hasattr(cls, \"__post_init__\"):\n        setattr(cls, \"__post_init__\", _combined_function(cls.__post_init__, _custom_post_init))\n    else:\n        setattr(cls, \"__post_init__\", _custom_post_init)\n    # add helper functions for dictionary conversion\n    setattr(cls, \"to_dict\", _class_to_dict)\n    setattr(cls, \"from_dict\", _update_class_from_dict)\n    setattr(cls, \"replace\", _replace_class_with_kwargs)\n    setattr(cls, \"copy\", _copy_class)\n    # wrap around dataclass\n    cls = dataclass(cls, **kwargs)\n    # return wrapped class\n    return cls\n```\n:::\n\n\nÏÑ§Î™ÖÏùÑ Í∑∏ÎåÄÎ°ú Ìï¥ÏÑùÌïòÎ©¥ Îã§ÏùåÍ≥º Í∞ôÎã§.\n\n\n\n> `dataclass` Ìï®ÏàòÎ•º ÎûòÌçºÎ°ú Í∞êÏã∏ÏÑú Ï∂îÍ∞Ä Í≤ÄÏÇ¨ Î∞è Ïú†Ìã∏Î¶¨Ìã∞Î•º Ï∂îÍ∞ÄÌïúÎã§.\n>\n> ÌååÏù¥Ïç¨ 3.7Î∂ÄÌÑ∞ ÏßÄÏõêÏùÑ ÏãúÏûëÌïú ÌëúÏ§Ä `dataclass`ÏóêÎäî Îëê Í∞ÄÏßÄ Ï£ºÏöî Î¨∏Ï†úÍ∞Ä ÏûàÏñ¥ÏÑú ÏùºÎ∞òÏ†ÅÏù¥ÏßÄ ÏïäÎã§.\n>\n> 1. Î™®Îì† Î©§Î≤ÑÏóê ÎåÄÌï¥ ÌÉÄÏûÖ annotationÏù¥ ÌïÑÏöîÌï®.\n> 2. Í∞ÄÎ≥Ä Î≥ÄÏàòÎ•º Ïû¨Ï¥àÍ∏∞ÌôîÌïòÍ∏∞ ÏúÑÌï¥ `field(default_factory=...)`Î•º Î™ÖÏãúÏ†ÅÏúºÎ°ú ÏÇ¨Ïö©Ìï¥ÏïºÌï®.\n>\n> `configclass`Îäî ÌååÏù¥Ïç¨Ïùò `dataclass` Ïú†Ìã∏Î¶¨Ìã∞Î•º Í∞êÏã∏Îäî Îç∞ÏΩîÎ†àÏù¥ÌÑ∞Î•º Ï†úÍ≥µÌïòÏó¨ ÏúÑÏùò Îëê Í∞ÄÏßÄ Î¨∏Ï†úÎ•º Ï≤òÎ¶¨ÌïúÎã§.\n>\n> ÎòêÌïú `dictionary <-> class`Ïóê ÎåÄÌïú Ï∂îÍ∞Ä helper Ìï®ÏàòÎ•º Ï†úÍ≥µÌïúÎã§. \n\n\n\nÏ¶â, dataclassÏùò Î∂ÄÏ°±Ìïú Î∂ÄÎ∂ÑÏùÑ Ï±ÑÏõåÏ§¨Îã§Í≥† Ïù¥Ìï¥ÌïòÎ©¥ ÎêúÎã§. ÏïÑÎûò ÏòàÏ†úÎ•º ÌÜµÌï¥ Ï¢Ä Îçî ÏïåÏïÑÎ≥¥Ïûê.\n\n\n\n```python\n@configclass\nclass ViewerCfg:\n    eye: list = [7.5, 7.5, 7.5]  # field missing on purpose\n    lookat: list = field(default_factory=[0.0, 0.0, 0.0])\n\n\n@configclass\nclass EnvCfg:\n    num_envs: int = MISSING\n    episode_length: int = 2000\n    viewer: ViewerCfg = ViewerCfg()\n\n# create configuration instance\nenv_cfg = EnvCfg(num_envs=24)\n\n# print information as a dictionary\nprint(env_cfg.to_dict())\n\n# create a copy of the configuration\nenv_cfg_copy = env_cfg.copy()\n\n# replace arbitrary fields using keyword arguments\nenv_cfg_copy = env_cfg_copy.replace(num_envs=32)\n```\n\n\n\nÏúÑÏôÄ Í∞ôÏù¥ `to_dict` Ìï®ÏàòÎ•º Ï†úÍ≥µÌï®ÏúºÎ°úÏç® Ìé∏Î¶¨ÌïòÍ≤å dictioaryÌôî ÌïòÍ≥†, copyÎ°ú Î≥µÏÇ¨Î•º Ìï† Ïàò ÏûàÎã§. ÎòêÌïú replaceÎ•º ÌÜµÌï¥ copyÎ•º ÌïòÎ©¥ÏÑú Í∞íÏùÑ Î≥ÄÍ≤ΩÌï† ÏàòÎèÑ ÏûàÎã§.\n\n\n\n`configclass` Îç∞ÏΩîÎ†àÏù¥ÌÑ∞Îäî Íµ¨ÏÑ± Í¥ÄÎ¶¨ÏóêÏÑú Î∞úÏÉùÌïòÎäî ÏùºÎ∞òÏ†ÅÏù∏ Î¨∏Ï†úÎ•º Ìï¥Í≤∞ÌïòÏó¨ `dataclass` Í∏∞Îä•ÏùÑ Í∏∞Î∞òÏúºÎ°ú Íµ¨Ï∂ïÎêú Í∞ïÎ†•Ìïú Ïú†Ìã∏Î¶¨Ìã∞Ïù¥Îã§. \nmutableÌïú Í∏∞Î≥∏Í∞íÏùÑ ÏâΩÍ≤å Ï≤òÎ¶¨ÌïòÍ≥†, `type annotation`ÏùÑ ÎèôÏ†ÅÏúºÎ°ú Ï†úÍ≥µÌïòÍ≥†, `replace` Î∞è `copy`ÏôÄ Í∞ôÏùÄ ÏùºÎ∞òÏ†ÅÏù∏ ÏûëÏóÖÏùÑ ÏúÑÌïú `utiliy method`Î•º Ï†úÍ≥µÌïòÏó¨ Íµ¨ÏÑ± ÌÅ¥ÎûòÏä§ ÏÉùÏÑ±ÏùÑ Îã®ÏàúÌôîÌïúÎã§.\n`configclass` Îç∞ÏΩîÎ†àÏù¥ÌÑ∞Îäî Íµ¨ÏÑ± Í∞ùÏ≤¥Í∞Ä Ïú†Ïó∞ÌïòÍ≥† Í∞ïÎ†•ÌïòÎ©∞ Ï°∞ÏûëÌïòÍ∏∞ Ïâ¨ÏõåÏïº ÌïòÎäî Ïï†ÌîåÎ¶¨ÏºÄÏù¥ÏÖòÏóê ÌäπÌûà Ïú†Ïö©ÌïòÎã§.\n\n\n\n ÏöîÏïΩÌïòÏûêÎ©¥, ÏïÑÎûòÏôÄ Í∞ôÏù¥ ÌëúÎ°ú Ï†ïÎ¶¨Ìï† Ïàò ÏûàÎã§.\n\n|     Feature/Aspect      |                `dataclass`                 |                        `configclass`                         |\n| :---------------------: | :----------------------------------------: | :----------------------------------------------------------: |\n|       **Purpose**       |        General-purpose data storage        |      Configuration management with additional utilities      |\n|  **Type Annotations**   |          Required for all fields           |   Automatically handled, no need for explicit annotations    |\n|  **Mutable Defaults**   |   Requires `field(default_factory=...)`    |     Automatically managed, no need for `default_factory`     |\n| **Post-Initialization** | Supports `__post_init__` for customization |   Augments or creates `__post_init__` for additional logic   |\n|   **Utility Methods**   | Basic methods like `__init__`, `__repr__`  | Additional methods like `to_dict`, `from_dict`, `copy`, `replace` |\n|    **Customization**    |        Standard dataclass features         |          Enhanced with custom checks and processing          |\n\n\n\n## üìñReference\n\n1. [[Python Î¨∏Î≤ï] Îç∞ÏΩîÎ†àÏù¥ÌÑ∞ (Decorator)](https://nachwon.github.io/decorator/)\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}